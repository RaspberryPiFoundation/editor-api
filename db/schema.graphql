type Component implements Node {
  content: String
  createdAt: ISO8601DateTime!
  default: Boolean!
  extension: String!

  """
  ID of the object.
  """
  id: ID!
  index: Int
  name: String!
  project: Project
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Component.
"""
type ComponentConnection {
  """
  A list of edges.
  """
  edges: [ComponentEdge]

  """
  A list of nodes.
  """
  nodes: [Component]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ComponentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Component
}

input ComponentInput {
  content: String
  default: Boolean
  extension: String
  name: String
  projectId: ID
}

"""
Autogenerated input type of CreateProject
"""
input CreateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: ProjectInput!
}

"""
Autogenerated return type of CreateProject.
"""
type CreateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Image {
  createdAt: ISO8601DateTime!
  filename: String!
  id: ID!
  url: String
}

"""
The connection type for Image.
"""
type ImageConnection {
  """
  A list of edges.
  """
  edges: [ImageEdge]

  """
  A list of nodes.
  """
  nodes: [Image]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ImageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Image
}

type Mutation {
  createProject(
    """
    Parameters for CreateProject
    """
    input: CreateProjectInput!
  ): CreateProjectPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Project implements Node {
  """
  All components associated with this project
  """
  components(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComponentConnection
  createdAt: ISO8601DateTime!

  """
  ID of the object.
  """
  id: ID!
  identifier: String!

  """
  All images associated with this project
  """
  images(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ImageConnection
  name: String
  projectType: String!
  remixedFrom: Project
  updatedAt: ISO8601DateTime!
  userId: Uuid
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

input ProjectInput {
  components: [ComponentInput!]
  identifier: String
  name: String
  projectType: String
  remixedFromId: ID
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Find a project by identifier
  """
  project(
    """
    Project identifier
    """
    identifier: String!
  ): Project

  """
  All projects
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection
}

"""
Represents textual data as UTF-8 character sequences. This type is most often
used by GraphQL to represent free-form human-readable text.
"""
scalar Uuid
